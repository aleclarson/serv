// Generated by CoffeeScript 1.12.4
var Service, assertType, cons, isType, request;

assertType = require("assertType");

isType = require("isType");

request = require("./request");

Service = function(config) {
  var self;
  assertType(config, Object);
  assertType(config.url, String);
  self = Object.create(Service.prototype);
  self.url = config.url;
  if (isType(config.auth, String)) {
    cons(self, "_auth", "Basic " + new Buffer(config.auth).toString("base64"));
  } else if (isType(config.auth, Function)) {
    cons(self, "_auth", config.auth());
  } else if (isType(config.key, String)) {
    cons(self, "_key", config.key);
  }
  if (config.certAuth) {
    cons(self, "_certAuth", config.certAuth);
  }
  if (isType(config.rate, Number)) {
    self._rate = config.rate;
    self._rateLimit = config.rateLimit;
  }
  cons(self, "_dataType", config.dataType || "json");
  return self;
};

Service.prototype.get = function(uri) {
  var headers, query;
  assertType(uri, String);
  query = arguments[1] || {};
  headers = query.headers || {};
  delete query.headers;
  if (this._auth) {
    headers["Authorization"] = this._auth;
  } else if (this._key) {
    query.key = this._key;
  }
  return request(this.url + uri, {
    certAuth: this._certAuth,
    headers: headers,
    query: query
  });
};

Service.prototype.post = function(uri, data) {
  var contentType, headers, query;
  assertType(uri, String);
  headers = arguments[2];
  if (!isType(headers, Object)) {
    if (isType(data, Object)) {
      headers = data.headers || {};
      delete data.headers;
    } else {
      headers = {};
    }
  }
  if (!headers["Content-Type"]) {
    contentType = this._dataType;
  }
  if (this._auth) {
    headers["Authorization"] = this._auth;
  } else if (this._key) {
    query = {
      key: this._key
    };
  }
  return request(this.url + uri, {
    method: "POST",
    certAuth: this._certAuth,
    contentType: contentType,
    data: data,
    headers: headers,
    query: query
  });
};

module.exports = Service;

cons = function(obj, key, value) {
  return Object.defineProperty(obj, key, {
    value: value
  });
};
