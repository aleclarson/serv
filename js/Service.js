// Generated by CoffeeScript 1.12.4
var Service, assertValid, configTypes, cons, isValid, request, sslConfigTypes;

assertValid = require("assertValid");

isValid = require("isValid");

request = require("./request");

configTypes = {
  url: "string",
  key: "string?",
  auth: "string|function?",
  ssl: "object?",
  rate: "number?",
  rateLimit: "number?",
  dataType: "string?"
};

sslConfigTypes = {
  key: "string?",
  cert: "string?",
  ca: "string|array?"
};

Service = function(name, config) {
  var self;
  assertValid(name, "string");
  assertValid(config, configTypes);
  self = Object.create(Service.prototype);
  self.name = name;
  self.url = config.url;
  if (config.key) {
    cons(self, "_key", config.key);
  } else if (config.auth) {
    cons(self, "_auth", isValid(config.auth, "string") ? "Basic " + new Buffer(config.auth).toString("base64") : config.auth());
  }
  if (config.ssl) {
    assertValid(config.ssl, sslConfigTypes);
    cons(self, "_ssl", config.ssl);
  }
  if (config.rate) {
    self._rate = config.rate;
    self._rateLimit = config.rateLimit;
  }
  cons(self, "_dataType", config.dataType || "json");
  return self;
};

Service.prototype.get = function(uri) {
  var headers, query;
  assertValid(uri, "string");
  query = arguments[1] || {};
  headers = query.headers || {};
  delete query.headers;
  if (this._auth) {
    headers["Authorization"] = this._auth;
  } else if (this._key) {
    query.key = this._key;
  }
  return request(this.url + uri, {
    headers: headers,
    query: query,
    ssl: this._ssl
  });
};

Service.prototype.post = function(uri, data) {
  var contentType, headers, query;
  assertValid(uri, "string");
  headers = arguments[2];
  if (!isValid(headers, "object")) {
    if (isValid(data, "object")) {
      headers = data.headers || {};
      delete data.headers;
    } else {
      headers = {};
    }
  }
  if (!headers["Content-Type"]) {
    contentType = this._dataType;
  }
  if (this._auth) {
    headers["Authorization"] = this._auth;
  } else if (this._key) {
    query = {
      key: this._key
    };
  }
  return request(this.url + uri, {
    method: "POST",
    contentType: contentType,
    data: data,
    headers: headers,
    query: query,
    ssl: this._ssl
  });
};

module.exports = Service;

cons = function(obj, key, value) {
  return Object.defineProperty(obj, key, {
    value: value
  });
};
