// Generated by CoffeeScript 1.12.4
var Service, assertValid, configTypes, cons, isValid, request, sendBody, sendQuery;

assertValid = require("assertValid");

isValid = require("isValid");

request = require("request");

configTypes = {
  url: "string",
  auth: "string|function?",
  query: "object?",
  ssl: [
    {
      key: "string?",
      cert: "string?",
      ca: "string|array?"
    }, "?"
  ],
  throttle: [
    {
      rate: "number",
      limit: "number"
    }, "?"
  ],
  dataType: "string?",
  debug: "boolean?"
};

Service = function(name, config) {
  var self;
  assertValid(name, "string");
  assertValid(config, configTypes);
  self = Object.create(Service.prototype);
  self.name = name;
  self.url = config.url;
  if (config.debug) {
    cons(self, "_debug", true);
  }
  if (config.auth) {
    cons(self, "_auth", isValid(config.auth, "string") ? "Basic " + new Buffer(config.auth).toString("base64") : config.auth());
  }
  if (config.query) {
    cons(self, "_query", config.query);
  }
  if (config.ssl) {
    cons(self, "_ssl", config.ssl);
  }
  if (config.throttle) {
    cons(self, "_throttle", config.throttle);
  }
  cons(self, "_dataType", config.dataType || "json");
  return self;
};

Service.prototype.get = function(uri, query) {
  assertValid(uri, "string");
  assertValid(query, "object?");
  return sendQuery.call(this, "GET", uri, query);
};

Service.prototype["delete"] = function(uri, query) {
  assertValid(uri, "string");
  assertValid(query, "object?");
  return sendQuery.call(this, "DELETE", uri, query);
};

Service.prototype.post = function(uri, data) {
  assertValid(uri, "string");
  assertValid(data, "object|buffer|string?");
  return sendBody.call(this, "POST", uri, data);
};

Service.prototype.put = function(uri, data) {
  assertValid(uri, "string");
  assertValid(data, "object|buffer|string?");
  return sendBody.call(this, "PUT", uri, data);
};

Service.prototype.patch = function(uri, data) {
  assertValid(uri, "string");
  assertValid(data, "object|buffer|string?");
  return sendBody.call(this, "PATCH", uri, data);
};

module.exports = Service;

cons = function(obj, key, value) {
  return Object.defineProperty(obj, key, {
    value: value
  });
};

sendQuery = function(method, uri, query) {
  var headers;
  if (query != null) {
    if (isValid(query.headers, "object")) {
      headers = query.headers;
      delete query.headers;
    } else {
      headers = {};
    }
  } else {
    headers = {};
  }
  if (this.cookie) {
    headers["Cookie"] = this.cookie;
  }
  if (this._auth) {
    headers["Authorization"] = this._auth;
  }
  if (this._query) {
    if (query) {
      Object.assign(query, this._query);
    } else {
      query = this._query;
    }
  }
  return request(this.url + uri, {
    method: method,
    headers: headers,
    query: query,
    ssl: this._ssl,
    debug: this._debug
  });
};

sendBody = function(method, uri, data) {
  var contentType, headers, query;
  if (data != null) {
    query = data.query, headers = data.headers;
    if (data.data == null) {
      if (query != null) {
        delete data.query;
      }
      if (headers != null) {
        delete data.headers;
      } else {
        headers = {};
      }
    } else {
      data = data.data;
      if (headers == null) {
        headers = {};
      }
    }
  } else {
    headers = {};
  }
  if (!headers["Content-Type"]) {
    contentType = this._dataType;
  }
  if (this.cookie) {
    headers["Cookie"] = this.cookie;
  }
  if (this._auth) {
    headers["Authorization"] = this._auth;
  }
  if (this._query) {
    if (query) {
      Object.assign(query, this._query);
    } else {
      query = this._query;
    }
  }
  return request(this.url + uri, {
    method: method,
    headers: headers,
    query: query,
    data: data,
    contentType: contentType,
    ssl: this._ssl,
    debug: this._debug
  });
};
